@page "/ViewPosts"
@using DomainOrShared.Models
@using HttpClients.ClientInterfaces
@inject IPostService postService
@inject NavigationManager navMgr
@inject AuthenticationStateProvider provider

<h3>ViewPosts</h3>
@if (posts == null)
{
    <p>Loading posts...</p>
}
else if (!posts.Any())
{
    <p>No posts to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Author</th>
            <th>Title</th>
            <th>View post?</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in posts)
        {
            <tr>
                <td>@item.Author.UserName</td>
                <td>@item.Title</td>
                <td><button @onclick="@(()=> ShowFullPost(@item.Id))" class="acceptbtn">Expand post...</button></td>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}
<Modal ShowModal="showModal">
    <p>Author:</p>
    <p>@popUpPost.Author.UserName</p>
    <p></p>
    <p>@popUpPost.Title</p>
    <p>@popUpPost.Body</p>
    <button @onclick="@Proceed" class="acceptbtn">Close</button>
</Modal>

@code {
    private IEnumerable<Post>? posts;
    private string msg = "";
    private bool showModal;
    private Post popUpPost;

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/ViewPosts");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await postService.GetAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task ShowFullPost(int postId)
    {
        popUpPost = posts.FirstOrDefault(p => p.Id == postId);
        showModal = true;
    }
}