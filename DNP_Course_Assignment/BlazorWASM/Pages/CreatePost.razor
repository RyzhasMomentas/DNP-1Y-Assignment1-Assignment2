@page "/CreatePost"
@using DomainOrShared.Models
@using DomainOrShared.DTOs
@using HttpClients.ClientInterfaces
@inject IPostService postService 
@inject NavigationManager navMgr
@inject AuthenticationStateProvider provider

<AuthorizeView>
    <Authorized>
        <div class="card">
            <h3>Create Post</h3>
            <div class="form-group field">
                <div>
                    <label>Title:</label>
                </div>
                <div>
                    <input type="text" @bind="title" @bind:event="oninput"/>
                </div>
                <div>
                    <label>Body:</label>
                </div>
                <div>
                    <textarea rows="10" @bind-value="body" @bind-value:event="oninput"/>
                </div>
                
                @if (!string.IsNullOrEmpty(resultMsg))
                {
                    <label style="color: @color">@resultMsg</label>
                }
            </div>
            <div class="button-row">
                <button @onclick="Create" disabled="@(string.IsNullOrEmpty(title) || string.IsNullOrEmpty(body))" class="acceptbtn">Create</button>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h3>You must be logged in to create posts :(</h3>   
    </NotAuthorized>
</AuthorizeView>

@code {
    private string title = "";
    private string body = "";
    private string resultMsg = "";
    private string color = "";

    private async Task Create()
    {
        resultMsg = "";
        if (string.IsNullOrWhiteSpace(title))
        {
            resultMsg="Title cannot be empty";
            return;
        }
        if (string.IsNullOrWhiteSpace(body))
        {
            resultMsg="Body cannot be empty";
            return;
        }

        try
        {
            PostCreationDto dto = new(Int32.Parse(provider.GetAuthenticationStateAsync().Result
                .User.Claims.First(c => c.Type.Equals("Id")).Value), title, body);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/ViewPosts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }
}